itertools : 반복되는 형태의 데이터를 처리하는 기능을 제공하는 라이브러리, 순열과 조합 라이브러리를 제공한다
코딩테스트에서 주로 사용하는 클래스는 permutations, combinations이다

permutations : 리스트와 같은 iterable 객체에서 r 개의 데이터를 뽑아 일렬로 나열하는 모든 경우(순열)을 계산해준다.
               permutations는 클래스이므로 객체 초기화 이후에는 리스트 자료형으로 변환하여 사용한다. 
Ex) 리스트 ['A', 'B', 'C']에서 3개 (r = 3)을 뽑아 나열하는 모든 경우를 출력하는 예시
from itertools import permutations

data = ['A', 'B', 'C'] #데이터 준비

result = list(permutations(data, 3)) #모든 순열 구하기
print(result)

결과 : [('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]

combinations : 리스트와 같은 iterable 객체에서 r개의 데이터를 뽑아 순서를 고려하지 않고 나열하는 모든 경우(조합)을 계산해준다
              combinations는 클래스이므로 객체 초기화 이후에는 리스트 자료형으로 변환하여 사용한다.
Ex) 리스트 ['A', 'B', 'C']에서 2개(r = 2)를 뽑아 순서에 상관없이 나열하는 모든 경우를 출력하는 예시
from itertools import combinations

data = ['A', 'B', 'C'] #데이터 준비

result = list(permutations(data, 3)) # 2개를 뽑는 모든 조합 구하기
print(result)

결과 : (['A', 'B'), ('A', 'C'), ('B', 'C')]


  
heapq : 힙(Heap) 기능을 제공하는 라이브러리, 우선순위 큐 기능을 구현하기 위해 사용

bisect : 이진 탐색(Binary Search) 기능을 제공하는 라이브러리

collections : 덱(Deque), 카운터(Counter) 등의 자료구조를 포함하고 있는 라이브러리
